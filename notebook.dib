{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "dotnet_interactive": {
     "language": "javascript"
    },
    "polyglot_notebook": {
     "kernelName": "javascript"
    },
    "vscode": {
     "languageId": "polyglot-notebook"
    }
   },
   "outputs": [],
   "source": [
    "a = \"This is a text\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "dotnet_interactive": {
     "language": "javascript"
    },
    "polyglot_notebook": {
     "kernelName": "javascript"
    },
    "vscode": {
     "languageId": "polyglot-notebook"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "This is a text"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "console.log(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "dotnet_interactive": {
     "language": "javascript"
    },
    "polyglot_notebook": {
     "kernelName": "javascript"
    },
    "vscode": {
     "languageId": "polyglot-notebook"
    }
   },
   "outputs": [],
   "source": [
    "const b = 1345\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "dotnet_interactive": {
     "language": "javascript"
    },
    "polyglot_notebook": {
     "kernelName": "javascript"
    },
    "vscode": {
     "languageId": "polyglot-notebook"
    }
   },
   "outputs": [
    {
     "ename": "Error",
     "evalue": "Cannot use 'import.meta' outside a module",
     "output_type": "error",
     "traceback": [
      "Cannot use 'import.meta' outside a module"
     ]
    }
   ],
   "source": [
    "(async () => {\n",
    "  // Import the required modules\n",
    "  const fs = await import('fs/promises');\n",
    "  const path = await import('path');\n",
    "\n",
    "  // Specify the file path relative to the notebook file\n",
    "  const __dirname = path.dirname(new URL(import.meta.url).pathname);\n",
    "  const filePath = path.join(__dirname, 'example.txt');\n",
    "\n",
    "  try {\n",
    "    // Read the file contents\n",
    "    const data = await fs.readFile(filePath, 'utf8');\n",
    "    console.log('File contents:', data);\n",
    "  } catch (err) {\n",
    "    console.error('Error reading file:', err);\n",
    "  }\n",
    "})();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "dotnet_interactive": {
     "language": "javascript"
    },
    "polyglot_notebook": {
     "kernelName": "javascript"
    },
    "vscode": {
     "languageId": "polyglot-notebook"
    }
   },
   "outputs": [
    {
     "ename": "Error",
     "evalue": "Module name \"fs\" has not been loaded yet for context: _. Use require([])\nhttps://requirejs.org/docs/errors.html#notloaded",
     "output_type": "error",
     "traceback": [
      "Module name \"fs\" has not been loaded yet for context: _. Use require([])\n",
      "https://requirejs.org/docs/errors.html#notloaded"
     ]
    }
   ],
   "source": [
    "// Import the required modules\n",
    "const fs = require('fs');\n",
    "const path = require('path');\n",
    "\n",
    "// __dirname is available in CommonJS modules\n",
    "const filePath = path.join(__dirname, 'example.txt');\n",
    "\n",
    "// Read the file contents using a callback\n",
    "fs.readFile(filePath, 'utf8', (err, data) => {\n",
    "  if (err) {\n",
    "    console.error('Error reading file:', err);\n",
    "    return;\n",
    "  }\n",
    "\n",
    "  console.log('File contents:', data);\n",
    "});\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "dotnet_interactive": {
     "language": "javascript"
    },
    "polyglot_notebook": {
     "kernelName": "javascript"
    },
    "vscode": {
     "languageId": "polyglot-notebook"
    }
   },
   "outputs": [],
   "source": [
    "data_ = \"aa\"\n",
    "// Use RequireJS to load the 'fs' and 'path' modules\n",
    "\n",
    "require(['fs', 'path'], function(fs, path) {\n",
    "  // Specify the file path relative to the notebook file\n",
    "  const filePath = path.join(__dirname, 'example.txt');\n",
    "\n",
    "  // Read the file contents\n",
    "  fs.readFile(filePath, 'utf8', (err, data) => {\n",
    "    if (err) {\n",
    "      console.error('Error reading file:', err);\n",
    "      return;\n",
    "    }\n",
    "\n",
    "    console.log('File contents:', data);\n",
    "    data_ = data\n",
    "  });\n",
    "});\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "dotnet_interactive": {
     "language": "javascript"
    },
    "polyglot_notebook": {
     "kernelName": "javascript"
    },
    "vscode": {
     "languageId": "polyglot-notebook"
    }
   },
   "outputs": [
    {
     "ename": "Error",
     "evalue": "Failed to resolve module specifier 'path'",
     "output_type": "error",
     "traceback": [
      "Failed to resolve module specifier 'path'"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "const path = await import('path');\n",
    "const fs = await import('fs');\n",
    "\n",
    "try {\n",
    "data = await fs.readFile(filePath, 'utf8');\n",
    "console.log('File contents:', data);\n",
    "} catch (err) {\n",
    "console.error('Error reading file:', err);\n",
    "}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "dotnet_interactive": {
     "language": "javascript"
    },
    "polyglot_notebook": {
     "kernelName": "javascript"
    },
    "vscode": {
     "languageId": "polyglot-notebook"
    }
   },
   "outputs": [],
   "source": [
    "d3 = await import(\"https://cdn.jsdelivr.net/npm/d3@7/+esm\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "dotnet_interactive": {
     "language": "javascript"
    },
    "polyglot_notebook": {
     "kernelName": "javascript"
    },
    "vscode": {
     "languageId": "polyglot-notebook"
    }
   },
   "outputs": [
    {
     "ename": "Error",
     "evalue": "Failed to resolve module specifier 'path'",
     "output_type": "error",
     "traceback": [
      "Failed to resolve module specifier 'path'"
     ]
    }
   ],
   "source": [
    "await import('path');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "dotnet_interactive": {
     "language": "javascript"
    },
    "polyglot_notebook": {
     "kernelName": "javascript"
    },
    "vscode": {
     "languageId": "polyglot-notebook"
    }
   },
   "outputs": [],
   "source": [
    "// URL of the text file\n",
    "data_ = \"??\"\n",
    "const fileUrl = './example.txt';\n",
    "\n",
    "// Use fetch to get the file content\n",
    "fetch(fileUrl)\n",
    "  .then(response => {\n",
    "    data_ = \"1\"\n",
    "    if (!response.ok) {\n",
    "      throw new Error('Network response was not ok ' + response.statusText);\n",
    "    }\n",
    "    return response.text();\n",
    "  })\n",
    "  .then(data => {\n",
    "    data_ = \"2\"\n",
    "    console.log('File contents:', data);\n",
    "  })\n",
    "  .catch(error => {\n",
    "    data_ = \"3\"\n",
    "    console.error('There has been a problem with your fetch operation:', error);\n",
    "  });"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "dotnet_interactive": {
     "language": "javascript"
    },
    "polyglot_notebook": {
     "kernelName": "javascript"
    },
    "vscode": {
     "languageId": "polyglot-notebook"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "console.log(data_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "vscode": {
     "languageId": "polyglot-notebook"
    }
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".NET (C#)",
   "language": "C#",
   "name": ".net-csharp"
  },
  "language_info": {
   "name": "csharp"
  },
  "polyglot_notebook": {
   "kernelInfo": {
    "defaultKernelName": "csharp",
    "items": [
     {
      "aliases": [],
      "name": "csharp"
     }
    ]
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
